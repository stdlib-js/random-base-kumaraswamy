// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.2.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.2.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.2.0-esm/index.mjs";import{factory as d}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.2.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.2.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import{isPrimitive as u}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@v0.2.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-pow@v0.2.0-esm/index.mjs";function h(e,t){return u(e)?u(t)?null:new TypeError(p("invalid argument. Second argument must be a positive number. Value: `%s`.",t)):new TypeError(p("invalid argument. First argument must be a positive number. Value: `%s`.",e))}function f(e,t,n){var s=e();return g(1-g(1-s,1/n),1/t)}function j(){var u,g,j,v,c,b;if(0===arguments.length)g=d();else if(1===arguments.length){if(!s(u=arguments[0]))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",u));if(i(u,"prng")){if(!r(u.prng))throw new TypeError(p("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",u.prng));g=u.prng}else g=d(u)}else{if(v=h(c=arguments[0],b=arguments[1]))throw v;if(arguments.length>2){if(!s(u=arguments[2]))throw new TypeError(p("invalid argument. Options argument must be an object. Value: `%s`.",u));if(i(u,"prng")){if(!r(u.prng))throw new TypeError(p("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",u.prng));g=u.prng}else g=d(u)}else g=d()}return e(j=void 0===c?V:T,"NAME","kumaraswamy"),u&&u.prng?(e(j,"seed",null),e(j,"seedLength",null),n(j,"state",o(null),m),e(j,"stateLength",null),e(j,"byteLength",null),e(j,"toJSON",o(null)),e(j,"PRNG",g)):(t(j,"seed",y),t(j,"seedLength",w),n(j,"state",N,E),t(j,"stateLength",x),t(j,"byteLength",L),e(j,"toJSON",O),e(j,"PRNG",g),g=g.normalized),j;function y(){return g.seed}function w(){return g.seedLength}function x(){return g.stateLength}function L(){return g.byteLength}function N(){return g.state}function E(e){g.state=e}function O(){var e={type:"PRNG"};return e.name=j.NAME,e.state=l(g.state),e.params=void 0===c?[]:[c,b],e}function T(){return f(g,c,b)}function V(e,t){return a(e)||a(t)||e<=0||t<=0?NaN:f(g,e,t)}}var v=j();e(v,"factory",j);export{v as default,j as factory};
//# sourceMappingURL=index.mjs.map
